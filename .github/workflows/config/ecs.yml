AWSTemplateFormatVersion: "2010-09-09"
Description:
  Create Fargate and ALB For LenSentApp

Metadata:
  "AWS::CloudFormation::Interface":
    ParameterGroups:
      - Label:
          default: "Project Name Prefix"
        Parameters:
          - ProjectName
      - Label:
          default: "APIALB Configuration"
        Parameters:
          - APIALBName
          - TargetGroupNameForAPIALB
      - Label:
          default: "InternetALB Configuration"
        Parameters:
          - InternetALBName
          - TargetGroupNameForInternetALB
      - Label:
          default: "Fargate for ECS Configuration"
        Parameters:
          - ECSClusterName
          - ECSTaskName
          - ECSTaskCPUUnit
          - ECSTaskMemory
          - ECSContainerName
          - ECSImageName
          - ECSServiceName
          - ECSTaskDesiredCount
      - Label:
          default: "Route53 Configuration"
        Parameters:
          - HostedZoneName
      - Label:
          default: "ACM Configuration"
        Parameters:
          - Record01
      # - Label:
      #     default: "Scaling Configuration"
      #   Parameters:
      #     - ServiceScaleEvaluationPeriods
      #     - ServiceCpuScaleOutThreshold
      #     - ServiceCpuScaleInThreshold
      #     - TaskMinContainerCount
      #     - TaskMaxContainerCount

    ParameterLabels:
      APIALBName:
        default: "APIALBName"
      TargetGroupNameForAPIALB:
        default: "TargetGroupNameForAPIALB"
      InternetALBName:
        default: "InternetALBName"
      TargetGroupNameForInternetALB:
        default: "TargetGroupNameForInternetALB"
      ECSClusterName:
        default: "ECSClusterName"
      ECSTaskName:
        default: "ECSTaskName"
      ECSTaskCPUUnit:
        default: "ECSTaskCPUUnit"
      ECSTaskMemory:
        default: "ECSTaskMemory"
      ECSContainerName:
        default: "ECSContainerName"
      ECSImageName:
        default: "ECSImageName"
      ECSServiceName:
        default: "ECSServiceName"
      ECSTaskDesiredCount:
        default: "ECSTaskDesiredCount"

# ------------------------------------------------------------#
# Input Parameters
# ------------------------------------------------------------#
Parameters:
  ProjectName:
    Default: lensent
    Type: String

#APIALB
  APIALBName:
    Type: String
    Default: "api-alb"

#TargetGroupNameForAPIALB
  TargetGroupNameForAPIALB:
    Type: String
    Default: "tg-golang"

#InternetALB
  InternetALBName:
    Type: String
    Default: "internet-alb"

#TargetGroupName
  TargetGroupNameForInternetALB:
    Type: String
    Default: "tg-next-js"

#ECSClusterName
  ECSClusterName:
    Type: String
    Default: "cluster"

#ECSTaskName
  ECSTaskName:
    Type: String
    Default: "golang-task"

#ECSTaskCPUUnit
  ECSTaskCPUUnit:
    AllowedValues: [ 256, 512, 1024, 2048, 4096  ]
    Type: String
    Default: "256"

#ECSTaskMemory
  ECSTaskMemory:
    AllowedValues: [ 256, 512, 1024, 2048, 4096  ]
    Type: String
    Default: "512"

#ECSContainerName
  ECSContainerName:
    Type: String
    Default: "golang-container"

#ECSImageName
  ECSImageName:
    Type: String
    Default: "xxxxxxxxxxxx.dkr.ecr.ap-northeast-1.amazonaws.com/kaji-test-ecr:latest"

#ECSServiceName
  ECSServiceName:
    Type: String
    Default: "golang-service"

#ECSTaskDesiredCount
  ECSTaskDesiredCount:
    Type: Number
    Default: 1

  HostedZoneName:
    Description: domain name.
    Type: String

  Record01:
    Type: String
    Default: "lensent.tk"
    Description: domain name

# Scaling params
  # ServiceScaleEvaluationPeriods:
  #   Description: The number of periods over which data is compared to the specified threshold
  #   Type: Number
  #   Default: 2
  #   MinValue: 2

  # ServiceCpuScaleOutThreshold:
  #   Type: Number
  #   Description: Average CPU value to trigger auto scaling out
  #   Default: 50
  #   MinValue: 0
  #   MaxValue: 100
  #   ConstraintDescription: Value must be between 0 and 100

  # ServiceCpuScaleInThreshold:
  #   Type: Number
  #   Description: Average CPU value to trigger auto scaling in
  #   Default: 25
  #   MinValue: 0
  #   MaxValue: 100
  #   ConstraintDescription: Value must be between 0 and 100

  # TaskMinContainerCount:
  #   Type: Number
  #   Description: Minimum number of containers to run for the service
  #   Default: 1
  #   MinValue: 1
  #   ConstraintDescription: Value must be at least one

  # TaskMaxContainerCount:
  #   Type: Number
  #   Description: Maximum number of containers to run for the service when auto scaling out
  #   Default: 2
  #   MinValue: 1
  #   ConstraintDescription: Value must be at least one

Resources:

# ------------------------------------------------------------#
#  Target Group
# ------------------------------------------------------------#
  TargetGroupForAPIALB:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      VpcId: !ImportValue LenSentVPCName
      Name: !Sub "${ProjectName}-${TargetGroupNameForAPIALB}"
      Protocol: HTTP
      Port: 8080
      TargetType: ip

  TargetGroupForInternetALB:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      VpcId: !ImportValue LenSentVPCName
      Name: !Sub "${ProjectName}-${TargetGroupNameForInternetALB}"
      Protocol: HTTP
      Port: 3000
      TargetType: ip

# ------------------------------------------------------------#
#  Internet ALB
# ------------------------------------------------------------#
  APIALB:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Name: !Sub "${ProjectName}-${APIALBName}"
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${APIALBName}"
      Scheme: "internet-facing"
      SecurityGroups:
        - !ImportValue ALBSecurityGroupName
      Subnets:
        - !ImportValue ECSSubnet1Name
        - !ImportValue ECSSubnet2Name

  APIALBListenerHTTP:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Host: "#{host}"
            Path: "/#{path}"
            Port: 443
            Protocol: HTTPS
            Query: "#{query}"
            StatusCode: HTTP_301
      LoadBalancerArn: !Ref APIALB
      Port: 80
      Protocol: HTTP
  APIALBListenerHTTPS:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref ACM
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroupForAPIALB
          Type: forward
      LoadBalancerArn: !Ref APIALB


  InternetALB:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Name: !Sub "${ProjectName}-${InternetALBName}"
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${InternetALBName}"
      Scheme: "internet-facing"
      SecurityGroups:
        - !ImportValue ALBForNextjsSecurityGroupName
      Subnets:
        - !ImportValue ECSSubnet1Name
        - !ImportValue ECSSubnet2Name

  InternetALBListenerHTTP:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Host: "#{host}"
            Path: "/#{path}"
            Port: 443
            Protocol: HTTPS
            Query: "#{query}"
            StatusCode: HTTP_301
      LoadBalancerArn: !Ref InternetALB
      Port: 80
      Protocol: HTTP
  InternetListenerHTTPS:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref ACM
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroupForInternetALB
          Type: forward
      LoadBalancerArn: !Ref InternetALB

# ------------------------------------------------------------#
# ECS Cluster
# ------------------------------------------------------------#
  ECSCluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterName: !Sub "${ProjectName}-${ECSClusterName}"

# ------------------------------------------------------------#
#  ECS LogGroup
# ------------------------------------------------------------#
  ECSLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/ecs/logs/${ProjectName}-ecs-group"

# ------------------------------------------------------------#
#  ECS Task Execution Role
# ------------------------------------------------------------#
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectName}-ECSTaskExecutionRolePolicy"
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

# ------------------------------------------------------------#
#  ECS TaskDefinition
# ------------------------------------------------------------#
  ECSTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      Cpu: !Ref ECSTaskCPUUnit
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      Family: !Sub "${ProjectName}-${ECSTaskName}"
      Memory: !Ref ECSTaskMemory
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE

#ContainerDefinitions
      ContainerDefinitions:
        - Name: !Sub "${ProjectName}-${ECSContainerName}"
          Image: !Ref ECSImageName
          Environment:
           - Name: DB_USER
             Value: !ImportValue DBUser
           - Name: DB_PASSWORD
             Value: !ImportValue DBPassword
           - Name: DB_NAME
             Value: !ImportValue ApplicationDatabaseName
           - Name: DB_ENDPOINT
             Value: !ImportValue DBEndpoint
           - Name: DB_PORT
             Value: !ImportValue DBPort
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ECSLogGroup
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: !Ref ProjectName
          MemoryReservation: 128
          PortMappings:
            - HostPort: 8080
              Protocol: tcp
              ContainerPort: 8080

# ------------------------------------------------------------#
#  ECS Service
# ------------------------------------------------------------#
  ECSService:
    Type: AWS::ECS::Service
    DependsOn: APIALBListenerHTTPS
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: !Ref ECSTaskDesiredCount
      LaunchType: FARGATE
      LoadBalancers:
        -
          TargetGroupArn: !Ref TargetGroupForAPIALB
          ContainerPort: 8080
          ContainerName: !Sub "${ProjectName}-${ECSContainerName}"
      NetworkConfiguration:
       AwsvpcConfiguration:
           AssignPublicIp: ENABLED
           SecurityGroups:
             - !ImportValue ECSSecurityGroupName
           Subnets:
             - !ImportValue ECSSubnet1Name
             - !ImportValue ECSSubnet2Name
      ServiceName: !Sub "${ProjectName}-${ECSServiceName}"
      TaskDefinition: !Ref ECSTaskDefinition

# ------------------------------------------------------------#
#  Auto Scaling Service
# ------------------------------------------------------------#
  # ServiceAutoScalingRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service: application-autoscaling.amazonaws.com
  #           Action: sts:AssumeRole
  #     Path: /
  #     Policies:
  #       - PolicyName: !Sub "${ProjectName}-${ECSContainerName}-autoscaling"
  #         PolicyDocument:
  #           Statement:
  #             - Effect: Allow
  #               Action:
  #                 - application-autoscaling:*
  #                 - cloudwatch:DescribeAlarms
  #                 - cloudwatch:PutMetricAlarm
  #                 - ecs:DescribeServices
  #                 - ecs:UpdateService
  #               Resource: '*'

  # ServiceScalingTarget:
  #   Type: AWS::ApplicationAutoScaling::ScalableTarget
  #   Properties:
  #     MinCapacity: !Ref TaskMinContainerCount
  #     MaxCapacity: !Ref TaskMaxContainerCount
  #     ResourceId: !Sub
  #       - service/${EcsClusterName}/${EcsDefaultServiceName}
  #       - EcsClusterName: !Ref ECSCluster
  #         EcsDefaultServiceName: !Sub "${ProjectName}-${ECSServiceName}"
  #     RoleARN: !GetAtt ServiceAutoScalingRole.Arn
  #     ScalableDimension: ecs:service:DesiredCount
  #     ServiceNamespace: ecs
  #   DependsOn:
  #     - ECSService
  #     - ServiceAutoScalingRole

  # ServiceScaleOutPolicy:
  #   Type: AWS::ApplicationAutoScaling::ScalingPolicy
  #   Properties:
  #     PolicyName: !Sub "${ProjectName}-${ECSServiceName}-ScaleOutPolicy"
  #     PolicyType: StepScaling
  #     ScalingTargetId: !Ref ServiceScalingTarget
  #     StepScalingPolicyConfiguration:
  #       AdjustmentType: ChangeInCapacity
  #       Cooldown: 60
  #       MetricAggregationType: Average
  #       StepAdjustments:
  #         - ScalingAdjustment: 1
  #           MetricIntervalLowerBound: 0
  #   DependsOn: ServiceScalingTarget

  # ServiceScaleInPolicy:
  #   Type: AWS::ApplicationAutoScaling::ScalingPolicy
  #   Properties:
  #     PolicyName: !Sub "${ProjectName}-${ECSServiceName}-ScaleInPolicy"
  #     PolicyType: StepScaling
  #     ScalingTargetId: !Ref ServiceScalingTarget
  #     StepScalingPolicyConfiguration:
  #       AdjustmentType: ChangeInCapacity
  #       Cooldown: 60
  #       MetricAggregationType: Average
  #       StepAdjustments:
  #         - ScalingAdjustment: -1
  #           MetricIntervalUpperBound: 0
  #   DependsOn: ServiceScalingTarget

  # ServiceScaleOutAlarm:
  #   Type: AWS::CloudWatch::Alarm
  #   Properties:
  #     AlarmName: !Sub "${ProjectName}-${ECSServiceName}-ScaleOutAlarm"
  #     EvaluationPeriods: !Ref ServiceScaleEvaluationPeriods
  #     Statistic: Average
  #     TreatMissingData: notBreaching
  #     Threshold: !Ref ServiceCpuScaleOutThreshold
  #     AlarmDescription: Alarm to add capacity if CPU is high
  #     Period: 60
  #     AlarmActions:
  #       - !Ref ServiceScaleOutPolicy
  #     Namespace: AWS/ECS
  #     Dimensions:
  #       - Name: ClusterName
  #         Value: !Ref ECSCluster
  #       - Name: ServiceName
  #         Value: !Sub "${ProjectName}-${ECSServiceName}"
  #     ComparisonOperator: GreaterThanThreshold
  #     MetricName: CPUUtilization
  #   DependsOn:
  #     - ECSService
  #     - ServiceScaleOutPolicy

  # ServiceScaleInAlarm:
  #   Type: AWS::CloudWatch::Alarm
  #   Properties:
  #     AlarmName: !Sub "${ProjectName}-${ECSServiceName}-ScaleInAlarm"
  #     EvaluationPeriods: !Ref ServiceScaleEvaluationPeriods
  #     Statistic: Average
  #     TreatMissingData: notBreaching
  #     Threshold: !Ref ServiceCpuScaleInThreshold
  #     AlarmDescription: Alarm to reduce capacity if container CPU is low
  #     Period: 300
  #     AlarmActions:
  #       - !Ref ServiceScaleInPolicy
  #     Namespace: AWS/ECS
  #     Dimensions:
  #       - Name: ClusterName
  #         Value: !Ref ECSCluster
  #       - Name: ServiceName
  #         Value: !Sub "${ProjectName}-${ECSServiceName}"
  #     ComparisonOperator: LessThanThreshold
  #     MetricName: CPUUtilization
  #   DependsOn:
  #     - ECSService
  #     - ServiceScaleInPolicy

  # ------------------------------------------------------------#
  #  Route53
  # ------------------------------------------------------------#

  Route53HostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: !Sub "${HostedZoneName}"
  route53RSGroup:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref Route53HostedZone
      RecordSets:
        - Name: !Sub "www.${HostedZoneName}."
          AliasTarget:
            HostedZoneId: !GetAtt InternetALB.CanonicalHostedZoneID
            DNSName: !GetAtt InternetALB.DNSName
          Type: A
        - Name: !Sub "backend.${HostedZoneName}."
          AliasTarget:
            HostedZoneId: !GetAtt APIALB.CanonicalHostedZoneID
            DNSName: !GetAtt APIALB.DNSName
          Type: A

  # ------------------------------------------------------------#
  #  ACM
  # ------------------------------------------------------------#

  ACM:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub "${Record01}"
      DomainValidationOptions:
        - DomainName: !Sub "${Record01}"
          HostedZoneId: !Ref Route53HostedZone
      SubjectAlternativeNames:
        - !Sub "*.${Record01}"
      ValidationMethod: DNS


Outputs:
  APIALB:
    Value: !Ref APIALB
    Export:
      Name: APIALBName
  APIALBTargetGroup:
    Value: !Ref TargetGroupForAPIALB
  APIALBEndpoint:
    Value: !Sub
      - "http://${APIALBEndpoint}"
      - APIALBEndpoint: !GetAtt APIALB.DNSName
    Export:
      Name: APIALBEndpoint
  HostedZone:
    Value: !Ref Route53HostedZone
    Export:
      Name: HostedZoneI
  InternetALB:
    Value: !Ref InternetALB
    Export:
      Name: InternetALBName
  TargetGroupForInternetALB:
    Value: !Ref TargetGroupForInternetALB
    Export:
      Name: TargetGroupForInternetALB
  InternetALBHostedZoneID:
    Value: !GetAtt InternetALB.CanonicalHostedZoneID
    Export:
      Name: InternetALBHostZoneId
  InternetALBEndpoint:
    Value: !Sub
      - "https://${InternetALBEndpoint}"
      - InternetALBEndpoint: !GetAtt InternetALB.DNSName
    Export:
      Name: InternetALBEndpoint